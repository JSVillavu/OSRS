program FastLumbyFighter;
{$DEFINE SMART}
{$i Reflection/Reflection.simba}

const
  USER = '';
  PASS = '';

  RIGHT_CLICK_ONLY = false;

Type
  TNPC = record
    Name: String;
    RClick: Boolean;
    Uptexts: TStringArray;
    Options: TStringArray;
    Offsets: Array [0..2] of Integer;
  end;

  TNPCArray = Array of TNPC;

var
  MyPlayer: TReflectLocalPlayer;
  MyLogger: TReflectLogger;
  Monsters: TNPCArray;

Procedure TNPC.Init(_Name: String; _RClick: Boolean; _Uptexts, _Options: TStringArray; _Offsets: Array [0..2] of Integer);
begin
  with self do
  begin
    Name := _Name;
    RClick := _RClick;
    Uptexts := _Uptexts;
    Options := _Options;
    Offsets := _Offsets;
  end;
end;

Procedure Monsters.Init();
begin
  SetLength(self, 2);
  self[0].init('Goblin'      , RIGHT_CLICK_ONLY, ['Attack'], ['Attack'],  [4, 4, 70]);
  self[1].init('Giant spider', RIGHT_CLICK_ONLY, ['Attack'], ['Attack'],  [4, 4, 10] );
end;

function TReflectNPC.GetPoint(x, y, z: Integer): TPoint;
begin
  x := RandomRange(- round(5/9 * x), round(9/5 * x));
  y := RandomRange(- round(5/9 * y), round(9/5 * y));
  z := RandomRange(0, round(9/5 * z));
  Result := Reflect.Tiles.TileToMs(Self.GetTile, x, y, z);
end;

Procedure TReflectionCompass.MMMake(newAngle, rand: Integer; highAngle: Boolean);
var
  currentAngle, dist: Extended;
  right: Boolean;
  TPABox: TPointArray;
  mousePoint, endPoint: TPoint;
  x1, y1: Integer;
begin
  newAngle := random(newAngle - rand, newAngle + rand);
  currentAngle := 360 - Reflect.Compass.AngleDeg();
  dist := Reflect.Compass.MinCheck(currentAngle, Int(newAngle));
  right := (Round((360 - currentAngle) + newAngle) mod 360 <= Round((currentAngle + 360) - newAngle) mod 360);
  If (dist <= 15) then
    exit;
  If (right) then
    TPABox := TPAFromBox(intToBox(16, 103, 276, 445))
  else
    TPABox := TPAFromBox(intToBox(364, 116, 680, 430));
  If (highAngle) then
    mousePoint := TPABox[random(0, 30000)]
  else
    mousePoint := TPABox[random(0, high(TPABox))];
  Reflect.Mouse.Move(mousePoint, 0, 0);
  getMousePos(x1, y1);
  If (right) and (highAngle) then
    endPoint := Point(Round(x1 + (dist * 3.00)), y1 + random(80, 150))
  else If (right) then
    endPoint := Point(Round(x1 + (dist * 3.00)), y1 - random(80, 150));
  If (not right) and (highAngle) then
    endPoint := Point(Round(x1 - (dist * 3.00)), y1 + random(80, 150))
  else If (not right) then
    endPoint := Point(Round(x1 - (dist * 3.00)), y1 - random(80, 150));
  HoldMouse(x1, y1, MOUSE_MIDDLE);
  Reflect.Mouse.Move(endPoint, 0, 0);
  sleep(random(1, 30));
  getMousePos(x1, y1);
  ReleaseMouse(x1, y1, MOUSE_MIDDLE);
end;

Procedure TReflectionTiles.RotateTowards(Tile: TPoint; setlow: boolean);
var
  Angle: Extended;
  AngleMM : integer;
  Me: TPoint;
begin
  If (random(30) > 25) then
  begin
    Reflect.Tiles.RotateCameraToTile(Tile);
    If (setlow) then
      Reflect.Compass.MakePitch(0);
  end else
  begin
    Me := MyPlayer.GetTile;
    Angle := (Degrees(ArcTan2(Tile.y - Me.y, Tile.x - Me.x))) - 90;
    If (Angle < 0) then
      Angle := 360 + Angle;
    Angle := 360 - Angle;
    AngleMM := round(angle);
    If (setlow) then
      Reflect.Compass.MMMake(AngleMM, -7 + random(14), false)
    else
      Reflect.Compass.MMMake(AngleMM, -7 + random(14), true);
  end;
  sleep(randomRange(130, 1204));
end;

Function TReflectNpc.FindFree(Names: TStringArray): Boolean;
var
  NPCs: TReflectNPCArray;
  I: Integer;
begin
  result := false;
  NPCs.Get(Names);
  If (length(NPCs) < 1) then exit();
  for I := 0 to High(NPCs) do
  begin
    If (NPCs[I].GetAnimation = - 1) and (not PointInBox(NPCs[I].GetTile, IntToBox(3243, 3244, 3248, 3248))) then
    begin
      self := NPCs[I];
      exit(true);
    end;
  end;
end;

Function TNPC.Interact(): Boolean;
var
  NPC: TReflectNPC;
Begin
  result := false;
  If (not (MyPlayer.IsLoggedIn)) then exit;

  If (not (NPC.FindFree([Monsters[0].Name, Monsters[1].Name]))) then exit;
  If (not (NPC.IsOnMS())) then
  Begin
    Reflect.Tiles.RotateTowards(NPC.GetTile(), false);
    If (not (NPC.IsOnMS())) then
      If (MyPlayer.BlindWalkMM(Point(NPC.GetTile().X + RandomRange(-4, 4), NPC.GetTile().Y + RandomRange(-4, 4)))) then
        MyPlayer.FFlag(2, 7000 + random(3000));
  end;

  Reflect.Mouse.Move(NPC.GetPoint(Monsters[0].Offsets[0], Monsters[0].Offsets[1], Monsters[0].Offsets[2]), 0, 0);

  If (Reflect.text.IsUpTextMulti(Monsters[0].Uptexts, 50 + random(100))) then
  Begin
    If (random(0, 50) > 1) then
      Reflect.Mouse.Click(MOUSE_LEFT)
    else
    Begin
      Reflect.Mouse.Click(MOUSE_RIGHT);
      If (not (Reflect.text.ChooseOptionMulti(Monsters[0].Options, 50 + random(100)))) then exit;
    end;
  end else
  Begin
    Reflect.Mouse.Click(MOUSE_RIGHT);
    If (not (Reflect.text.ChooseOptionMulti(Monsters[0].Options, 50 + random(100)))) then exit;
  end;

  If (not (Reflect.Mouse.DidClick(true, 750 + random(250)))) then
  writeln('no')
  else
  writeln('yes');
  result := MyPlayer.WaitForAnimation(100, 4000 + random(1000));
end;

Begin
  Reflect.Setup();
  MyPlayer.Username := USER;
  MyPlayer.Password := PASS;

  MyPlayer.Active := true;
  Reflect.MouseSpeed := 25;

  Monsters.Init();
  MyLogger.Init('Lumbridge Fighter');

  If (MyPlayer.isLoggedIn()) then
    MyPlayer.Create()
  else
    MyPlayer.Login();
  while (true) do
  Begin
    If (not MyPlayer.IsLoggedIn) then
      MyPlayer.Login()
    else
    Begin
      while (MyPlayer.getInteractingIndex > 0) and (MyPlayer.IsLoggedIn)  do
        sleep(50)
      Else If (not (MyPlayer.isMoving)) then
        TNPC.Interact();
    end;
  end;
end.
